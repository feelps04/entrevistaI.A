// Integra√ß√£o 100% GRATUITA com Web Speech API nativa do navegador
// Perfeita para demos - sem custos, sem chaves API, funciona offline!

class FreeSpeechIntegration {
    constructor() {
        this.recognition = null;
        this.isRecording = false;
        this.onTranscriptCallback = null;
        this.isSupported = this.checkSupport();
        this.lastSpeaker = 'interviewer'; // Alternar entre falantes
    }

    // Verificar suporte do navegador
    checkSupport() {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const isSupported = !!SpeechRecognition;
        
        if (isSupported) {
            console.log('‚úÖ Web Speech API: Suportada pelo navegador');
        } else {
            console.log('‚ùå Web Speech API: N√£o suportada');
            console.log('üí° Recomenda√ß√£o: Use Chrome, Edge ou Safari');
        }
        
        return isSupported;
    }

    // Inicializar reconhecimento de voz
    async startRecording(onTranscript) {
        if (!this.isSupported) {
            console.error('‚ùå Web Speech API n√£o suportada neste navegador');
            alert('Por favor, use Chrome, Edge ou Safari para o reconhecimento de voz funcionar.');
            return false;
        }

        this.onTranscriptCallback = onTranscript;

        try {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();

            // Configura√ß√µes otimizadas para entrevistas
            this.recognition.continuous = true;
            this.recognition.interimResults = true;
            this.recognition.lang = 'pt-BR';
            this.recognition.maxAlternatives = 1;

            // Event handlers
            this.recognition.onstart = () => {
                this.isRecording = true;
                console.log('üéôÔ∏è Reconhecimento de voz iniciado (GRATUITO)');
            };

            this.recognition.onresult = (event) => {
                this.handleSpeechResult(event);
            };

            this.recognition.onerror = (event) => {
                console.error('‚ùå Erro no reconhecimento:', event.error);
                
                if (event.error === 'not-allowed') {
                    alert('‚ùå Permiss√£o de microfone negada.\n\n‚úÖ Solu√ß√£o: Clique no √≠cone do microfone na barra de endere√ßos e autorize.');
                } else if (event.error === 'no-speech') {
                    console.log('‚è∏Ô∏è Nenhuma fala detectada - continuando...');
                } else if (event.error === 'network') {
                    console.log('üåê Erro de rede - tentando novamente...');
                }
            };

            this.recognition.onend = () => {
                if (this.isRecording) {
                    // Reiniciar automaticamente se ainda estiver gravando
                    console.log('üîÑ Reiniciando reconhecimento...');
                    setTimeout(() => {
                        if (this.isRecording) {
                            this.recognition.start();
                        }
                    }, 100);
                }
            };

            // Iniciar reconhecimento
            this.recognition.start();
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao iniciar reconhecimento:', error);
            alert('‚ùå Erro ao iniciar reconhecimento de voz.\n\nüí° Certifique-se de estar usando Chrome, Edge ou Safari.');
            return false;
        }
    }

    // Processar resultado do reconhecimento
    handleSpeechResult(event) {
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            const confidence = event.results[i][0].confidence || 0.9;

            if (event.results[i].isFinal && transcript.trim()) {
                // Determinar falante com l√≥gica melhorada
                const speaker = this.determineSpeaker(transcript);
                
                if (this.onTranscriptCallback) {
                    this.onTranscriptCallback({
                        text: transcript.trim(),
                        speaker: speaker,
                        confidence: confidence,
                        timestamp: Date.now(),
                        isFinal: true,
                        service: 'Web Speech API (Gratuito)'
                    });
                }

                console.log(`üé§ [${speaker.toUpperCase()}]:`, transcript.trim());
                console.log(`üìä Confian√ßa: ${Math.round(confidence * 100)}%`);
            }
        }
    }

    // Determinar falante com l√≥gica inteligente
    determineSpeaker(transcript) {
        const interviewerPatterns = [
            // Perguntas t√≠picas de entrevistador
            'pode', 'fale sobre', 'como voc√™', 'qual sua', 'me conte', 'me fala',
            'experi√™ncia', 'pergunta', 'pr√≥xima', 'obrigado', 'certo', 'ok',
            'entendi', 'perfeito', 'interessante', 'legal', 'bacana',
            'vamos', 'agora', 'pr√≥ximo', '√∫ltima', 'final',
            // Express√µes de entrevistador
            'muito bem', 'excelente', '√≥timo', 'show', 'beleza'
        ];

        const candidatePatterns = [
            // Respostas t√≠picas de candidato
            'trabalho', 'tenho', 'fiz', 'desenvolvi', 'usei', 'uso',
            'aprendi', 'projeto', 'empresa', 'anos', 'meses',
            'conhecimento', 'habilidade', 'experi√™ncia com',
            // Tecnologias comuns
            'react', 'javascript', 'python', 'java', 'node',
            'database', 'sql', 'api', 'frontend', 'backend',
            // Express√µes de candidato
            'na verdade', 'basicamente', 'ent√£o', 'a√≠', 'da√≠'
        ];

        const lowerTranscript = transcript.toLowerCase();
        
        let interviewerScore = 0;
        let candidateScore = 0;

        // Contar padr√µes
        interviewerPatterns.forEach(pattern => {
            if (lowerTranscript.includes(pattern)) {
                interviewerScore += pattern.length > 3 ? 2 : 1; // Padr√µes mais espec√≠ficos valem mais
            }
        });

        candidatePatterns.forEach(pattern => {
            if (lowerTranscript.includes(pattern)) {
                candidateScore += pattern.length > 3 ? 2 : 1;
            }
        });

        // L√≥gica de altern√¢ncia inteligente
        if (Math.abs(interviewerScore - candidateScore) <= 1) {
            // Se empate ou diferen√ßa pequena, alternar baseado no √∫ltimo falante
            const newSpeaker = this.lastSpeaker === 'interviewer' ? 'candidate' : 'interviewer';
            this.lastSpeaker = newSpeaker;
            return newSpeaker;
        }

        // Se diferen√ßa clara, usar o score
        const determinedSpeaker = candidateScore > interviewerScore ? 'candidate' : 'interviewer';
        this.lastSpeaker = determinedSpeaker;
        return determinedSpeaker;
    }

    // Parar reconhecimento
    stopRecording() {
        if (this.recognition && this.isRecording) {
            this.isRecording = false;
            this.recognition.stop();
            console.log('‚èπÔ∏è Reconhecimento de voz parado');
        }
    }

    // Testar conex√£o (sempre funciona se suportado)
    async testConnection() {
        if (this.isSupported) {
            console.log('‚úÖ Web Speech API: Funcionando (100% GRATUITO)');
            console.log('üí° N√£o precisa de internet ap√≥s carregar a p√°gina');
            console.log('üí° N√£o precisa de chaves API');
            console.log('üí° N√£o tem custos');
            return true;
        } else {
            console.log('‚ùå Web Speech API: N√£o suportada neste navegador');
            console.log('üí° Solu√ß√£o: Use Chrome, Edge ou Safari');
            return false;
        }
    }

    // Verificar permiss√µes de microfone
    async checkMicrophonePermission() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            stream.getTracks().forEach(track => track.stop());
            console.log('‚úÖ Permiss√£o de microfone: OK');
            return true;
        } catch (error) {
            console.error('‚ùå Permiss√£o de microfone negada:', error);
            return false;
        }
    }

    // Informa√ß√µes sobre o servi√ßo
    getServiceInfo() {
        return {
            name: 'Web Speech API',
            cost: 'GRATUITO',
            quality: 'Boa para demos',
            offline: 'Funciona offline',
            setup: 'Sem configura√ß√£o',
            browsers: 'Chrome, Edge, Safari'
        };
    }
}

// Simulador de IA melhorado para an√°lise (tamb√©m gratuito)
class EnhancedAIAnalysisSimulator {
    constructor() {
        this.keywords = {
            technical: {
                keywords: ['react', 'javascript', 'node', 'api', 'database', 'git', 'docker', 'aws', 'teste', 'c√≥digo', 'python', 'java', 'sql', 'html', 'css', 'framework', 'biblioteca', 'algoritmo', 'performance', 'otimiza√ß√£o', 'ci/cd', 'deploy', 'servidor', 'frontend', 'backend'],
                phrases: ['testes unit√°rios', 'code review', 'clean code', 'design patterns', 'arquitetura', 'microservi√ßos', 'rest api', 'graphql', 'typescript'],
                weight: 0.3
            },
            communication: {
                keywords: ['explicar', 'apresentar', 'equipe', 'cliente', 'reuni√£o', 'documentar', 'comunicar', 'falar', 'conversar', 'discutir', 'ensinar', 'treinar', 'workshop', 'apresenta√ß√£o'],
                phrases: ['trabalho em equipe', 'comunica√ß√£o clara', 'feedback', 'alinhamento', 'stakeholders'],
                weight: 0.25
            },
            problemSolving: {
                keywords: ['problema', 'solu√ß√£o', 'resolver', 'otimizar', 'melhorar', 'debug', 'an√°lise', 'desafio', 'dificuldade', 'implementar', 'investigar', 'diagnosticar', 'corrigir', 'refatorar'],
                phrases: ['resolvi um problema', 'encontrei uma solu√ß√£o', 'otimizei', 'melhorei a performance', 'reduzi o tempo', 'aumentei a efici√™ncia'],
                weight: 0.25
            },
            leadership: {
                keywords: ['lideran√ßa', 'gerenciar', 'coordenar', 'decis√£o', 'mentoria', 'conflito', 'projeto', 'time', 'responsabilidade', 'organizar', 'delegar', 'motivar', 'inspirar'],
                phrases: ['liderei um projeto', 'gerenciei uma equipe', 'tomei a decis√£o', 'resolvi conflitos', 'mentoreei', 'coordenei'],
                weight: 0.2
            }
        };
        
        this.conversationHistory = [];
    }

    // Analisar transcri√ß√£o e gerar sugest√µes
    analyzeTranscript(transcript, speaker) {
        // Adicionar ao hist√≥rico SEMPRE (entrevistador e candidato)
        this.conversationHistory.push({ transcript, speaker, timestamp: Date.now() });

        const suggestions = [];
        const lowerTranscript = transcript.toLowerCase();

        // Obter contexto da conversa (√∫ltimas 4 mensagens)
        const recentContext = this.getRecentContext();
        
        // ANALISAR AMBOS OS FALANTES para detectar erros e invers√µes
        this.generateContextualSuggestions(lowerTranscript, suggestions, recentContext, speaker);

        // Detectar t√≥picos mencionados (para ambos os falantes)
        const mentionedTopics = this.detectTopics(lowerTranscript, recentContext, speaker);

        // Se for candidato, calcular an√°lise normal
        // Se for entrevistador com erro, tamb√©m analisar
        let analysis = { technical: 0, communication: 0, problemSolving: 0, leadership: 0 };
        
        if (speaker === 'candidate') {
            analysis = this.generateAnalysis(mentionedTopics, recentContext);
        } else if (speaker === 'interviewer') {
            // Verificar se entrevistador cometeu erro (invers√£o de pap√©is)
            const interviewerErrors = this.checkInterviewerErrors(lowerTranscript, recentContext);
            if (interviewerErrors.hasError) {
                // Penalizar como se fosse resposta do candidato
                analysis.technical = interviewerErrors.penalty;
                console.log('üö® ERRO DO ENTREVISTADOR DETECTADO:', interviewerErrors.reason);
            }
        }

        return {
            suggestions,
            mentionedTopics,
            analysis: analysis,
            conversationLength: this.conversationHistory.length,
            context: recentContext,
            speaker: speaker
        };
    }

    // Obter contexto recente da conversa
    getRecentContext() {
        const recent = this.conversationHistory.slice(-4); // √öltimas 4 mensagens
        return {
            full: recent,
            lastInterviewer: recent.filter(msg => msg.speaker === 'interviewer').slice(-1)[0],
            lastCandidate: recent.filter(msg => msg.speaker === 'candidate').slice(-1)[0],
            conversation: recent.map(msg => `${msg.speaker}: ${msg.transcript}`).join(' | ')
        };
    }

    // Gerar sugest√µes contextuais
    generateContextualSuggestions(transcript, suggestions, context, speaker) {
        const lowerTranscript = transcript.toLowerCase();
        
        // PRIMEIRO: Verificar invers√£o de pap√©is
        this.checkRoleInversion(transcript, suggestions, context, speaker);
        
        // SEGUNDO: Reagir a erros e problemas (com contexto)
        this.generateErrorBasedSuggestions(lowerTranscript, suggestions, context, speaker);
        
        // TERCEIRO: Reagir a acertos e conhecimentos
        this.generatePositiveSuggestions(lowerTranscript, suggestions, context, speaker);
        
        // QUARTO: Sugest√µes gerais baseadas no contexto
        this.generateGeneralSuggestions(lowerTranscript, suggestions, context, speaker);
    }
    
    // Verificar invers√£o de pap√©is
    checkRoleInversion(transcript, suggestions, context, speaker) {
        const lastCandidate = context && context.lastCandidate ? context.lastCandidate.transcript.toLowerCase() : '';
        
        // Se candidato fez pergunta e entrevistador respondeu incorretamente
        if (speaker === 'interviewer' && 
            (lastCandidate.includes('quanto') || lastCandidate.includes('qual') || lastCandidate.includes('como'))) {
            
            // Verificar se entrevistador deu resposta incorreta
            if (transcript.trim() === '3' && lastCandidate.includes('1 + 1')) {
                suggestions.push({
                    text: 'üîÑ INVERS√ÉO DE PAP√âIS: Entrevistador respondeu incorretamente! Corrija e retome controle',
                    priority: 'high',
                    category: 'communication',
                    reason: 'Entrevistador deu resposta errada para pergunta do candidato'
                });
                suggestions.push({
                    text: '‚ö†Ô∏è ALERTA: Candidato est√° fazendo perguntas - retome o controle da entrevista',
                    priority: 'high',
                    category: 'leadership',
                    reason: 'Invers√£o de pap√©is detectada'
                });
            }
        }
        
        // Se candidato est√° fazendo muitas perguntas
        if (speaker === 'candidate' && 
            (transcript.includes('?') || transcript.includes('quanto') || transcript.includes('qual'))) {
            suggestions.push({
                text: 'üîÑ Candidato fazendo perguntas - redirecione para que ele responda',
                priority: 'medium',
                category: 'communication',
                reason: 'Candidato assumindo papel de entrevistador'
            });
        }
    }
    
    // Verificar erros do entrevistador
    checkInterviewerErrors(transcript, context) {
        const lastCandidate = context && context.lastCandidate ? context.lastCandidate.transcript.toLowerCase() : '';
        
        // Se entrevistador respondeu incorretamente a pergunta matem√°tica do candidato
        if (transcript.trim() === '3' && lastCandidate.includes('1 + 1')) {
            return {
                hasError: true,
                reason: 'Entrevistador respondeu 1+1=3 (invers√£o de pap√©is)',
                penalty: -25 // Penalidade maior por ser do entrevistador
            };
        }
        
        return { hasError: false };
    }
    
    // Sugest√µes baseadas em erros detectados
    generateErrorBasedSuggestions(transcript, suggestions, context, speaker) {
        // Verificar contexto da conversa para detectar erros
        const contextConversation = context ? context.conversation.toLowerCase() : '';
        const lastInterviewerQuestion = context && context.lastInterviewer ? context.lastInterviewer.transcript.toLowerCase() : '';
        
        console.log('üîç Analisando contexto:', contextConversation);
        console.log('üîç √öltima pergunta:', lastInterviewerQuestion);
        console.log('üîç Resposta atual:', transcript);
        
        // Verificar todos os tipos de erros
        const allErrors = [
            this.checkMathematicalErrors(transcript, lastInterviewerQuestion, contextConversation),
            this.checkTechnicalErrors(transcript, lastInterviewerQuestion, contextConversation),
            this.checkBusinessErrors(transcript, lastInterviewerQuestion, contextConversation),
            this.checkDataErrors(transcript, lastInterviewerQuestion, contextConversation),
            this.checkDesignErrors(transcript, lastInterviewerQuestion, contextConversation),
            this.checkGeneralErrors(transcript, lastInterviewerQuestion, contextConversation)
        ];
        
        // Processar erros encontrados
        allErrors.forEach(errorCheck => {
            if (errorCheck.hasError) {
                console.log('üö® ERRO DETECTADO:', errorCheck.reason);
                
                // Sugest√£o principal do erro
                suggestions.push({
                    text: `üö® ${errorCheck.reason} - Corrija e teste conhecimentos relacionados`,
                    priority: 'high',
                    category: 'technical',
                    reason: errorCheck.reason
                });
                
                // Sugest√µes espec√≠ficas baseadas no tipo de erro
                this.generateSpecificErrorSuggestions(errorCheck, suggestions, lastInterviewerQuestion);
            }
        });
        
        // Respostas evasivas
        const evasivePatterns = ['n√£o sei', 'n√£o tenho certeza', 'talvez', 'acho que'];
        const evasiveCount = evasivePatterns.filter(pattern => transcript.includes(pattern)).length;
        if (evasiveCount > 0) {
            suggestions.push({
                text: '‚ö†Ô∏è Candidato demonstra inseguran√ßa - fa√ßa perguntas mais b√°sicas',
                priority: 'high',
                category: 'communication',
                reason: `${evasiveCount} indicadores de inseguran√ßa detectados`
            });
        }
        
        // Respostas muito curtas
        if (transcript.length < 15 && !transcript.includes('oi')) {
            suggestions.push({
                text: 'üìè Resposta muito curta - pe√ßa para elaborar com exemplos',
                priority: 'medium',
                category: 'communication',
                reason: 'Falta de detalhamento'
            });
        }
        
        // Erros t√©cnicos conceituais
        if (transcript.includes('react √© uma linguagem')) {
            suggestions.push({
                text: '‚ùå ERRO T√âCNICO: React √© biblioteca, n√£o linguagem! Corrija e teste outros conceitos',
                priority: 'high',
                category: 'technical',
                reason: 'Conceito t√©cnico incorreto'
            });
        }
        
        if (transcript.includes('html √© linguagem de programa√ß√£o')) {
            suggestions.push({
                text: '‚ùå ERRO T√âCNICO: HTML √© marca√ß√£o, n√£o programa√ß√£o! Verifique conhecimentos b√°sicos',
                priority: 'high',
                category: 'technical',
                reason: 'Confus√£o conceitual detectada'
            });
        }
    }
    
    // Sugest√µes baseadas em acertos e conhecimentos
    generatePositiveSuggestions(transcript, suggestions, context, speaker) {
        const lowerTranscript = transcript.toLowerCase();
        const lastQuestion = context && context.lastInterviewer ? context.lastInterviewer.transcript.toLowerCase() : '';
        
        // Acertos matem√°ticos
        if (transcript.includes('2') && (transcript.includes('1 + 1') || transcript.includes('1+1'))) {
            suggestions.push({
                text: '‚úÖ √ìtimo racioc√≠nio! Agora teste conhecimentos t√©cnicos mais avan√ßados',
                priority: 'medium',
                category: 'technical',
                reason: 'Demonstrou racioc√≠nio l√≥gico b√°sico'
            });
        }
        
        // REACT - Respostas corretas
        if (lastQuestion.includes('react') || (context && context.conversation.includes('react'))) {
            if (lowerTranscript.includes('react √© uma biblioteca') || lowerTranscript.includes('react √© um framework')) {
                suggestions.push({
                    text: '‚úÖ Excelente! Pergunte sobre hooks, state management ou componentes',
                    priority: 'medium',
                    category: 'technical',
                    reason: 'Conceito React correto'
                });
            }
            
            // Bonus para explica√ß√£o detalhada sobre React
            if (lowerTranscript.includes('diferen√ßa entre biblioteca e framework') || 
                lowerTranscript.includes('frameworks oferecem estrutura')) {
                suggestions.push({
                    text: 'üåü EXCELENTE explica√ß√£o! Teste conhecimentos avan√ßados de React (JSX, Virtual DOM)',
                    priority: 'high',
                    category: 'technical',
                    reason: 'Demonstrou conhecimento profundo'
                });
            }
        }
        
        // JAVASCRIPT - Respostas corretas
        if (lastQuestion.includes('javascript') || (context && context.conversation.includes('javascript'))) {
            if (lowerTranscript.includes('javascript √© uma linguagem') || lowerTranscript.includes('linguagem de programa√ß√£o')) {
                suggestions.push({
                    text: '‚úÖ Correto! Explore ES6+, closures, promises ou async/await',
                    priority: 'medium',
                    category: 'technical',
                    reason: 'Fundamento JavaScript s√≥lido'
                });
            }
        }
        
        // Respostas muito detalhadas e t√©cnicas
        if (transcript.length > 150 && (lowerTranscript.includes('porque') || lowerTranscript.includes('pois'))) {
            suggestions.push({
                text: 'üåü Excelente explica√ß√£o detalhada! Pe√ßa exemplo pr√°tico ou caso de uso',
                priority: 'medium',
                category: 'communication',
                reason: 'Resposta bem fundamentada'
            });
        }
        
        // Compara√ß√µes t√©cnicas (muito bom sinal)
        if (lowerTranscript.includes('diferen√ßa') || lowerTranscript.includes('enquanto') || lowerTranscript.includes('compara√ß√£o')) {
            suggestions.push({
                text: 'üéØ √ìtima capacidade anal√≠tica! Fa√ßa perguntas sobre trade-offs ou decis√µes arquiteturais',
                priority: 'medium',
                category: 'problem-solving',
                reason: 'Demonstrou pensamento comparativo'
            });
        }
        
        // Men√ß√£o de experi√™ncia espec√≠fica
        if (transcript.includes('anos') && (transcript.includes('experi√™ncia') || transcript.includes('trabalho'))) {
            suggestions.push({
                text: '‚úÖ Boa experi√™ncia! Pe√ßa detalhes sobre projetos mais desafiadores',
                priority: 'medium',
                category: 'technical',
                reason: 'Experi√™ncia mencionada'
            });
        }
    }
    
    // Sugest√µes gerais baseadas no contexto
    generateGeneralSuggestions(transcript, suggestions) {
        // Tecnologias mencionadas
        if (transcript.includes('react') || transcript.includes('javascript')) {
            suggestions.push({
                text: 'Pergunte sobre testes unit√°rios e debugging',
                priority: 'medium',
                category: 'technical',
                reason: 'Tecnologias front-end mencionadas'
            });
        }

        if (transcript.includes('projeto') || transcript.includes('desenvolvi')) {
            suggestions.push({
                text: 'Pe√ßa m√©tricas de sucesso do projeto',
                priority: 'medium',
                category: 'problem-solving',
                reason: 'Projetos mencionados'
            });
        }

        if (transcript.includes('equipe') || transcript.includes('time')) {
            suggestions.push({
                text: 'Como resolve conflitos t√©cnicos na equipe?',
                priority: 'medium',
                category: 'leadership',
                reason: 'Trabalho em equipe mencionado'
            });
        }

        // Sugest√µes baseadas em palavras-chave espec√≠ficas
        if (transcript.includes('desafio') || transcript.includes('problema')) {
            suggestions.push({
                text: 'Como mediu o impacto da solu√ß√£o?',
                priority: 'high',
                category: 'problem-solving',
                reason: 'Resolu√ß√£o de problemas mencionada'
            });
        }
        
        // Sugest√µes para aprofundar conhecimento
        if (transcript.includes('python')) {
            suggestions.push({
                text: 'Pergunte sobre frameworks Python (Django/Flask)',
                priority: 'medium',
                category: 'technical',
                reason: 'Python mencionado'
            });
        }
        
        if (transcript.includes('dados') || transcript.includes('an√°lise')) {
            suggestions.push({
                text: 'Teste conhecimentos em SQL e visualiza√ß√£o',
                priority: 'medium',
                category: 'technical',
                reason: '√Årea de dados mencionada'
            });
        }
    }

    // Detectar t√≥picos mencionados
    detectTopics(transcript, context) {
        const mentionedTopics = [];
        
        Object.keys(this.keywords).forEach(category => {
            let totalMatches = 0;
            const foundItems = [];
            
            // Verificar palavras-chave
            const keywordMatches = this.keywords[category].keywords.filter(keyword => 
                transcript.includes(keyword.toLowerCase())
            );
            totalMatches += keywordMatches.length;
            foundItems.push(...keywordMatches);
            
            // Verificar frases (se existirem)
            if (this.keywords[category].phrases) {
                const phraseMatches = this.keywords[category].phrases.filter(phrase => 
                    transcript.includes(phrase.toLowerCase())
                );
                totalMatches += phraseMatches.length * 2; // Frases valem mais
                foundItems.push(...phraseMatches);
            }
            
            // Sempre calcular score para todas as categorias (pode ser negativo)
            const score = this.calculateCategoryScore(transcript, category, context);
            
            if (totalMatches > 0 || score !== 0) {
                mentionedTopics.push({ 
                    category, 
                    keywords: foundItems, 
                    count: totalMatches,
                    score: score
                });
            }
        });

        return mentionedTopics;
    }

    // Calcular score espec√≠fico por categoria
    calculateCategoryScore(transcript, category, context) {
        const lowerTranscript = transcript.toLowerCase();
        let score = 0;
        
        // PRIMEIRO: Verificar respostas incorretas ou problem√°ticas (COM CONTEXTO)
        const negativeIndicators = this.checkNegativeIndicators(lowerTranscript, category, context);
        if (negativeIndicators.hasNegative) {
            console.log(`‚ö†Ô∏è Resposta problem√°tica detectada: ${negativeIndicators.reason}`);
            return Math.max(negativeIndicators.penalty, -20); // Penalidade m√°xima de -20
        }
        
        // SEGUNDO: Verificar respostas muito curtas ou vagas
        if (transcript.length < 10) {
            console.log('‚ö†Ô∏è Resposta muito curta detectada');
            return -5; // Penalidade por resposta muito curta
        }
        
        // TERCEIRO: Verificar respostas evasivas
        const evasivePatterns = ['n√£o sei', 'n√£o tenho certeza', 'talvez', 'acho que', 'n√£o lembro', 'n√£o conhe√ßo'];
        const evasiveCount = evasivePatterns.filter(pattern => lowerTranscript.includes(pattern)).length;
        if (evasiveCount > 0) {
            console.log(`‚ö†Ô∏è Resposta evasiva detectada: ${evasiveCount} indicadores`);
            score -= evasiveCount * 10; // -10 por cada indicador evasivo
        }
        
        // QUARTO: Score positivo por palavras-chave
        const keywordMatches = this.keywords[category].keywords.filter(keyword => 
            lowerTranscript.includes(keyword.toLowerCase())
        );
        score += keywordMatches.length * 10;
        
        // Score extra por frases espec√≠ficas
        if (this.keywords[category].phrases) {
            const phraseMatches = this.keywords[category].phrases.filter(phrase => 
                lowerTranscript.includes(phrase.toLowerCase())
            );
            score += phraseMatches.length * 20;
        }
        
        // Bonus por comprimento da resposta (mais detalhes = melhor)
        if (transcript.length > 100) {
            score += 5;
        }
        if (transcript.length > 200) {
            score += 10;
        }
        
        // Bonus espec√≠ficos por categoria
        score += this.getCategorySpecificBonus(lowerTranscript, category);
        
        // Verificar conhecimento t√©cnico espec√≠fico
        if (category === 'technical') {
            score += this.checkTechnicalKnowledge(lowerTranscript);
        }
        
        return Math.max(Math.min(score, 50), -20); // Entre -20 e 50 pontos
    }
    
    // Verificar indicadores negativos
    checkNegativeIndicators(transcript, category, context) {
        const contextConversation = context ? context.conversation.toLowerCase() : '';
        const lastInterviewerQuestion = context && context.lastInterviewer ? context.lastInterviewer.transcript.toLowerCase() : '';
        
        // 1. ERROS MATEM√ÅTICOS B√ÅSICOS
        const mathErrors = this.checkMathematicalErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (mathErrors.hasError) return mathErrors;
        
        // 2. ERROS T√âCNICOS DE PROGRAMA√á√ÉO
        const programmingErrors = this.checkTechnicalErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (programmingErrors.hasError) return programmingErrors;
        
        // 3. ERROS CONCEITUAIS DE NEG√ìCIO
        const businessErrors = this.checkBusinessErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (businessErrors.hasError) return businessErrors;
        
        // 4. ERROS DE DADOS E ANALYTICS
        const dataErrors = this.checkDataErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (dataErrors.hasError) return dataErrors;
        
        // 5. ERROS DE DESIGN E UX
        const designErrors = this.checkDesignErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (designErrors.hasError) return designErrors;
        
        // 6. ERROS GERAIS DE CONHECIMENTO
        const generalErrors = this.checkGeneralErrors(transcript, lastInterviewerQuestion, contextConversation);
        if (generalErrors.hasError) return generalErrors;
        
        return { hasNegative: false };
    }
    
    // 1. Verificar erros matem√°ticos b√°sicos
    checkMathematicalErrors(transcript, lastQuestion, context) {
        // Erros matem√°ticos simples
        if (transcript.trim() === '3' || transcript.includes('tr√™s')) {
            if (lastQuestion.includes('1 + 1') || lastQuestion.includes('1+1') || context.includes('1 + 1')) {
                return { hasError: true, reason: 'Erro matem√°tico: 1+1=3', penalty: -20 };
            }
        }
        
        if ((transcript.includes('5') || transcript.includes('cinco')) && 
            (lastQuestion.includes('2 + 2') || context.includes('2 + 2'))) {
            return { hasError: true, reason: 'Erro matem√°tico: 2+2=5', penalty: -15 };
        }
        
        return { hasError: false };
    }
    
    // 2. Verificar erros t√©cnicos de programa√ß√£o
    checkTechnicalErrors(transcript, lastQuestion, context) {
        const lowerTranscript = transcript.toLowerCase();
        
        // REACT - Verificar erros, mas aceitar respostas corretas
        if (lastQuestion.includes('react') || context.includes('react')) {
            // RESPOSTAS CORRETAS (n√£o penalizar)
            if (lowerTranscript.includes('react √© uma biblioteca') || 
                lowerTranscript.includes('react √© um framework') ||
                lowerTranscript.includes('react √© biblioteca') ||
                lowerTranscript.includes('react √© framework') ||
                lowerTranscript.includes('biblioteca para') ||
                lowerTranscript.includes('framework para') ||
                lowerTranscript.includes('constru√ß√£o de ui') ||
                lowerTranscript.includes('desenvolvimento web') ||
                lowerTranscript.includes('componentes')) {
                // Resposta correta - n√£o penalizar
                return { hasError: false };
            }
            
            // RESPOSTAS INCORRETAS
            if (lowerTranscript.includes('react √© uma linguagem') || 
                lowerTranscript.includes('react √© linguagem')) {
                return { hasError: true, reason: 'Erro: React √© biblioteca/framework, n√£o linguagem', penalty: -15 };
            }
            if (lowerTranscript.includes('react √© backend') || 
                lowerTranscript.includes('react √© para backend')) {
                return { hasError: true, reason: 'Erro: React √© frontend, n√£o backend', penalty: -12 };
            }
            if (lowerTranscript.includes('react √© banco de dados') ||
                lowerTranscript.includes('react √© database')) {
                return { hasError: true, reason: 'Erro: React n√£o √© banco de dados', penalty: -15 };
            }
        }
        
        // JAVASCRIPT
        if (lastQuestion.includes('javascript') || context.includes('javascript')) {
            if (lowerTranscript.includes('javascript √© igual java')) {
                return { hasError: true, reason: 'Erro: JavaScript ‚â† Java', penalty: -15 };
            }
            if (lowerTranscript.includes('javascript √© compilado')) {
                return { hasError: true, reason: 'Erro: JavaScript √© interpretado', penalty: -10 };
            }
        }
        
        // HTML/CSS
        if (lastQuestion.includes('html') || context.includes('html')) {
            if (lowerTranscript.includes('html √© linguagem de programa√ß√£o')) {
                return { hasError: true, reason: 'Erro: HTML √© marca√ß√£o, n√£o programa√ß√£o', penalty: -12 };
            }
        }
        
        if (lastQuestion.includes('css') || context.includes('css')) {
            if (lowerTranscript.includes('css √© linguagem de programa√ß√£o')) {
                return { hasError: true, reason: 'Erro: CSS √© estiliza√ß√£o, n√£o programa√ß√£o', penalty: -12 };
            }
        }
        
        // PYTHON
        if (lastQuestion.includes('python') || context.includes('python')) {
            if (lowerTranscript.includes('python √© s√≥ para web')) {
                return { hasError: true, reason: 'Erro: Python √© multiprop√≥sito', penalty: -10 };
            }
        }
        
        return { hasError: false };
    }
    
    // 3. Verificar erros conceituais de neg√≥cio
    checkBusinessErrors(transcript, lastQuestion, context) {
        const lowerTranscript = transcript.toLowerCase();
        
        // SCRUM/AGILE
        if (lastQuestion.includes('scrum') || context.includes('scrum')) {
            if (lowerTranscript.includes('scrum master √© gerente')) {
                return { hasError: true, reason: 'Erro: Scrum Master n√£o √© gerente', penalty: -12 };
            }
            if (lowerTranscript.includes('sprint dura 1 m√™s')) {
                return { hasError: true, reason: 'Erro: Sprint t√≠pica √© 1-4 semanas', penalty: -8 };
            }
        }
        
        // MVP
        if (lastQuestion.includes('mvp') || context.includes('mvp')) {
            if (lowerTranscript.includes('mvp √© produto final')) {
                return { hasError: true, reason: 'Erro: MVP √© vers√£o m√≠nima vi√°vel', penalty: -10 };
            }
        }
        
        // KPIs
        if (lastQuestion.includes('kpi') || context.includes('kpi')) {
            if (lowerTranscript.includes('kpi n√£o √© importante')) {
                return { hasError: true, reason: 'Erro: KPIs s√£o fundamentais para m√©tricas', penalty: -12 };
            }
        }
        
        return { hasError: false };
    }
    
    // 4. Verificar erros de dados e analytics
    checkDataErrors(transcript, lastQuestion, context) {
        const lowerTranscript = transcript.toLowerCase();
        
        // SQL
        if (lastQuestion.includes('sql') || context.includes('sql')) {
            if (lowerTranscript.includes('select * √© sempre melhor')) {
                return { hasError: true, reason: 'Erro: SELECT * n√£o √© boa pr√°tica', penalty: -10 };
            }
            if (lowerTranscript.includes('sql √© s√≥ para mysql')) {
                return { hasError: true, reason: 'Erro: SQL √© padr√£o para v√°rios SGBDs', penalty: -8 };
            }
        }
        
        // MACHINE LEARNING
        if (lastQuestion.includes('machine learning') || context.includes('machine learning')) {
            if (lowerTranscript.includes('machine learning √© s√≥ ia')) {
                return { hasError: true, reason: 'Erro: ML √© subcampo da IA', penalty: -10 };
            }
            if (lowerTranscript.includes('n√£o precisa de dados')) {
                return { hasError: true, reason: 'Erro: ML depende fundamentalmente de dados', penalty: -15 };
            }
        }
        
        // ESTAT√çSTICA
        if (lastQuestion.includes('m√©dia') || context.includes('m√©dia')) {
            if (lowerTranscript.includes('m√©dia √© sempre melhor que mediana')) {
                return { hasError: true, reason: 'Erro: Mediana pode ser melhor com outliers', penalty: -8 };
            }
        }
        
        return { hasError: false };
    }
    
    // 5. Verificar erros de design e UX
    checkDesignErrors(transcript, lastQuestion, context) {
        const lowerTranscript = transcript.toLowerCase();
        
        // UX/UI
        if (lastQuestion.includes('ux') || lastQuestion.includes('ui') || context.includes('design')) {
            if (lowerTranscript.includes('ux e ui s√£o a mesma coisa')) {
                return { hasError: true, reason: 'Erro: UX (experi√™ncia) ‚â† UI (interface)', penalty: -12 };
            }
            if (lowerTranscript.includes('design n√£o √© importante')) {
                return { hasError: true, reason: 'Erro: Design √© fundamental para usabilidade', penalty: -15 };
            }
        }
        
        // USABILIDADE
        if (lastQuestion.includes('usabilidade') || context.includes('usabilidade')) {
            if (lowerTranscript.includes('usu√°rio sempre sabe o que quer')) {
                return { hasError: true, reason: 'Erro: Usu√°rios nem sempre sabem suas necessidades', penalty: -10 };
            }
        }
        
        // ACESSIBILIDADE
        if (lastQuestion.includes('acessibilidade') || context.includes('acessibilidade')) {
            if (lowerTranscript.includes('acessibilidade n√£o √© necess√°ria')) {
                return { hasError: true, reason: 'Erro: Acessibilidade √© obrigat√≥ria e √©tica', penalty: -15 };
            }
        }
        
        return { hasError: false };
    }
    
    // 6. Verificar erros gerais de conhecimento
    checkGeneralErrors(transcript, lastQuestion, context) {
        const lowerTranscript = transcript.toLowerCase();
        
        // GIT
        if (lastQuestion.includes('git') || context.includes('git')) {
            if (lowerTranscript.includes('git √© s√≥ para backup')) {
                return { hasError: true, reason: 'Erro: Git √© para controle de vers√£o colaborativo', penalty: -10 };
            }
            if (lowerTranscript.includes('commit direto na main √© ok')) {
                return { hasError: true, reason: 'Erro: Commits diretos na main n√£o s√£o boa pr√°tica', penalty: -8 };
            }
        }
        
        // TESTES
        if (lastQuestion.includes('teste') || context.includes('teste')) {
            if (lowerTranscript.includes('testes s√£o perda de tempo')) {
                return { hasError: true, reason: 'Erro: Testes s√£o essenciais para qualidade', penalty: -15 };
            }
            if (lowerTranscript.includes('100% de cobertura √© sempre necess√°rio')) {
                return { hasError: true, reason: 'Erro: 100% cobertura nem sempre √© pr√°tico', penalty: -5 };
            }
        }
        
        // SEGURAN√áA
        if (lastQuestion.includes('seguran√ßa') || context.includes('seguran√ßa')) {
            if (lowerTranscript.includes('seguran√ßa n√£o √© minha responsabilidade')) {
                return { hasError: true, reason: 'Erro: Seguran√ßa √© responsabilidade de todos', penalty: -15 };
            }
            if (lowerTranscript.includes('senha 123 √© segura')) {
                return { hasError: true, reason: 'Erro: Senhas fracas s√£o vulnerabilidade cr√≠tica', penalty: -12 };
            }
        }
        
        return { hasError: false };
    }
    
    // Gerar sugest√µes espec√≠ficas baseadas no tipo de erro
    generateSpecificErrorSuggestions(errorCheck, suggestions, lastQuestion) {
        const reason = errorCheck.reason.toLowerCase();
        
        // Erros de React
        if (reason.includes('react')) {
            suggestions.push({
                text: 'üìö Teste: "React √© biblioteca ou framework?" e "Qual a diferen√ßa entre componente e elemento?"',
                priority: 'high',
                category: 'technical',
                reason: 'Aprofundar conhecimento React'
            });
        }
        
        // Erros de JavaScript
        if (reason.includes('javascript')) {
            suggestions.push({
                text: 'üìö Teste: "Diferen√ßa entre var, let e const" e "O que s√£o closures?"',
                priority: 'high',
                category: 'technical',
                reason: 'Validar fundamentos JavaScript'
            });
        }
        
        // Erros de UX/UI
        if (reason.includes('ux') || reason.includes('ui')) {
            suggestions.push({
                text: 'üìö Teste: "Como voc√™ faria pesquisa com usu√°rios?" e "O que √© design thinking?"',
                priority: 'high',
                category: 'communication',
                reason: 'Validar conhecimento UX'
            });
        }
        
        // Erros de dados
        if (reason.includes('sql') || reason.includes('machine learning')) {
            suggestions.push({
                text: 'üìö Teste: "Como otimizar uma query SQL?" e "Quando usar ML vs regras de neg√≥cio?"',
                priority: 'high',
                category: 'technical',
                reason: 'Aprofundar conhecimento dados'
            });
        }
        
        // Erros de seguran√ßa
        if (reason.includes('seguran√ßa') || reason.includes('senha')) {
            suggestions.push({
                text: 'üîí CR√çTICO: Teste conhecimentos de seguran√ßa - vulnerabilidades comuns',
                priority: 'high',
                category: 'technical',
                reason: 'Seguran√ßa √© cr√≠tica'
            });
        }
        
        // Erros matem√°ticos
        if (reason.includes('matem√°tico')) {
            suggestions.push({
                text: 'üßÆ Teste racioc√≠nio l√≥gico b√°sico antes de continuar com quest√µes t√©cnicas',
                priority: 'high',
                category: 'technical',
                reason: 'Validar capacidade de racioc√≠nio'
            });
        }
        
        // Sugest√£o geral para erros graves
        if (errorCheck.penalty <= -15) {
            suggestions.push({
                text: '‚ö†Ô∏è ERRO GRAVE: Considere encerrar entrevista ou testar conhecimentos mais b√°sicos',
                priority: 'high',
                category: 'communication',
                reason: 'Erro fundamental detectado'
            });
        }
    }
    
    // Bonus espec√≠ficos por categoria
    getCategorySpecificBonus(transcript, category) {
        let bonus = 0;
        
        switch(category) {
            case 'technical':
                if (transcript.includes('anos') || transcript.includes('experi√™ncia')) {
                    bonus += 15;
                }
                if (transcript.includes('projeto') || transcript.includes('desenvolvi')) {
                    bonus += 10;
                }
                // Bonus por mencionar tecnologias espec√≠ficas corretamente
                if (transcript.includes('react √© uma biblioteca') || transcript.includes('react √© um framework')) {
                    bonus += 20;
                }
                break;
                
            case 'communication':
                if (transcript.includes('explico') || transcript.includes('ensino')) {
                    bonus += 15;
                }
                if (transcript.includes('apresento') || transcript.includes('comunico')) {
                    bonus += 10;
                }
                // Bonus por respostas bem estruturadas
                if (transcript.length > 150 && transcript.includes('.')) {
                    bonus += 10; // Resposta bem estruturada
                }
                break;
                
            case 'problemSolving':
                if (transcript.includes('resolvi') || transcript.includes('solucionei')) {
                    bonus += 20;
                }
                if (transcript.includes('otimizei') || transcript.includes('melhorei')) {
                    bonus += 15;
                }
                // Bonus por metodologia de resolu√ß√£o
                if (transcript.includes('primeiro') || transcript.includes('depois') || transcript.includes('finalmente')) {
                    bonus += 10; // Abordagem estruturada
                }
                break;
                
            case 'leadership':
                if (transcript.includes('liderei') || transcript.includes('gerenciei')) {
                    bonus += 20;
                }
                if (transcript.includes('equipe') || transcript.includes('time')) {
                    bonus += 10;
                }
                break;
        }
        
        return bonus;
    }
    
    // Verificar conhecimento t√©cnico espec√≠fico
    checkTechnicalKnowledge(transcript) {
        let techBonus = 0;
        
        // Conhecimentos corretos recebem bonus
        const correctTechFacts = [
            // React
            { fact: 'react √© uma biblioteca', bonus: 15 },
            { fact: 'react √© um framework', bonus: 15 },
            { fact: 'react √© biblioteca', bonus: 15 },
            { fact: 'react √© framework', bonus: 15 },
            { fact: 'biblioteca para desenvolvimento', bonus: 12 },
            { fact: 'framework para desenvolvimento', bonus: 12 },
            { fact: 'constru√ß√£o de ui', bonus: 10 },
            { fact: 'componentes reutiliz√°veis', bonus: 12 },
            
            // JavaScript
            { fact: 'javascript √© uma linguagem de programa√ß√£o', bonus: 10 },
            { fact: 'javascript √© interpretado', bonus: 12 },
            { fact: 'javascript √© din√¢mico', bonus: 8 },
            
            // HTML/CSS
            { fact: 'html √© uma linguagem de marca√ß√£o', bonus: 10 },
            { fact: 'css √© para estiliza√ß√£o', bonus: 10 },
            { fact: 'html estrutura o conte√∫do', bonus: 8 },
            
            // Python
            { fact: 'python √© uma linguagem', bonus: 10 },
            { fact: 'python √© multiprop√≥sito', bonus: 12 },
            
            // Conceitos avan√ßados
            { fact: 'diferen√ßa entre biblioteca e framework', bonus: 20 },
            { fact: 'frameworks oferecem estrutura', bonus: 15 },
            { fact: 'bibliotecas focam em tarefas espec√≠ficas', bonus: 15 }
        ];
        
        correctTechFacts.forEach(tech => {
            if (transcript.includes(tech.fact)) {
                techBonus += tech.bonus;
                console.log(`‚úÖ Conhecimento t√©cnico correto: ${tech.fact} (+${tech.bonus} pontos)`);
            }
        });
        
        // Bonus extra para explica√ß√µes detalhadas
        if (transcript.length > 100 && transcript.includes('porque') || transcript.includes('pois')) {
            techBonus += 10;
            console.log('‚úÖ Explica√ß√£o detalhada (+10 pontos)');
        }
        
        // Bonus para compara√ß√µes t√©cnicas
        if (transcript.includes('diferen√ßa') || transcript.includes('compara√ß√£o') || transcript.includes('enquanto')) {
            techBonus += 8;
            console.log('‚úÖ Compara√ß√£o t√©cnica (+8 pontos)');
        }
        
        return techBonus;
    }

    // Gerar an√°lise das compet√™ncias
    generateAnalysis(mentionedTopics) {
        const scores = {
            technical: 0,
            communication: 0,
            problemSolving: 0,
            leadership: 0
        };

        mentionedTopics.forEach(topic => {
            scores[topic.category] = topic.score;
        });

        return scores;
    }
}

// Exportar para uso global
window.FreeSpeechIntegration = FreeSpeechIntegration;
window.EnhancedAIAnalysisSimulator = EnhancedAIAnalysisSimulator;
